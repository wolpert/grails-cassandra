http://www.opensource.org/licenses/apache2.0.php

Cassandra Version: 0.5.1
Hector Version: 0.5.1-8
Grails: 1.2.1



DISCLAIMER: ALMOST READY FOR PRIME TIME!

This codebase is usable, and the API's are fairly stable. However, its still
in development and bugs are sure to exist, so be careful, and report
problems to my github location.  http://github.com/wolpert/grails-cassandra



ABOUT

This grails plugins provides a service to enable easy access to Cassandra
from within grails. It is not intended to be a GORM mapping layer.

It specifically wraps the Hector (http://github.com/rantav/hector) API which
makes it easy to connect to Cassandra without dealing with the thrift layer.
Hector also provides for connection pooling, etc.

Goals:

Primary goals of this project is to have a service that provides easy access
to Cassandra. This includes simplify lookup and setting of Cassandra values,
and optionally hiding 'NotFound' exceptions. (The ruby Cassandra plugin 
returns an empty hash if a searched for value does not exist. Java plugin
throws an exception.)

INSTALLATION

You can either install via the standard grails technique:

   grails install-plugin cassandra

or download the latest zip from github download section.

USAGE

Once the plugin is installed, grails will inject the Cassandra service
into any controller or service that defines 'cassandraService' variable.

By default, this plugin will connect to Cassandra running at localhost:9160
using the keyspace 'Keyspace1' for all queries. To change this, setup in
your grails-app/conf/spring/resources.groovy file:

beans = {
        cassandraService(codehead.CassandraService){
            servers=["localhost:9160","192.168.2.1:9160"] as String[]
            //servers=["localhost:9160"] // for just one server
            defaultKeyspace="GeneralKeyspace"
        }
}

The above configuration will allow for server fail-over to multiple Cassandra
servers running, and default requests to the 'GeneralKeyspace' named Keyspace.


EXAMPLES

import java.util.Date
class CassandraLookupController {
    def cassandraService
    def index = {
        def now = new Date().toString()
        def old_value = cassandraService.setColumnValue("Users","2","login_date",now)  //column family, key, col_name, value
        def new_value = cassandraService.getColumnValue("Users","2","login_date")
        // Example that uses a superColumnFamily
        def old_scf_value = cassandraService.setColumnValue("Classes","chemistry","textbook","title","Quantum for Dummies") // column family, key, supercolumn, col_nam, value
        def new_scf_value = cassandraService.getColumnValue("Classes","chemistry","textbook","title")

        def str = "Login date was $old_value and now is $new_value"
        render(str)
    }
}

Note that you also have access to the Hector objects for connecting to
Cassandra.  More test cases will be generated to show examples on how to do
this. Until then, you can lookup how the service uses Hector in the code.


TODO
Some tasks in progress
  - Add in ability to set timestamps
  - Create CassandraHashMap
  - Test cases, better instructions.



THANKS

Thanks to iMemories for allowing me to open-source this code.  

